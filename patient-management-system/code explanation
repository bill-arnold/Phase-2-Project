

## Step-by-Step Explanation of Project Codes:

### 1. **PatientManagementApp Component (PatientManagementApp.js):**

   - **Import Statements:**
     ```jsx
     import React, { useState, useEffect } from 'react';
     import PatientList from './PatientList';
     import AddPatient from './AddPatient';
     import axios from 'axios';
     import '../App.css';
     ```

     - **Explanation:**
       - Import necessary dependencies and components.
       - `useState` and `useEffect` are React hooks for managing state and performing side effects, respectively.
       - Import `axios` for making HTTP requests.
       - Import the `PatientList` and `AddPatient` components.

   - **Component Functionality:**
     ```jsx
     const PatientManagementApp = () => {
       const [patients, setPatients] = useState([]);

       useEffect(() => {
         axios.get('http://localhost:3001/patients')
           .then(response => setPatients(response.data))
           .catch(error => console.error('Error fetching patients', error));
       }, []);

       // ... rest of the code
     };
     ```

     - **Explanation:**
       - Initialize state using the `useState` hook to store the list of patients.
       - Use `useEffect` to fetch patient data from the API when the component mounts.

   - **Add Patient Functionality:**
     ```jsx
     const handleAddPatient = (newPatient) => {
       axios.post('http://localhost:3001/patients', newPatient)
         .then(response => setPatients([...patients, response.data]))
         .catch(error => console.error('Error adding patient', error));

       const reminderTime = new Date(newPatient.appointmentDate).getTime() - Date.now();
       if (reminderTime > 0) {
         setTimeout(() => {
           alert(`Reminder: Appointment for ${newPatient.name} today!`);
         }, reminderTime);
       }
     };
     ```

     - **Explanation:**
       - Implement a function to add a new patient to the API and update the state.
       - Simulate a reminder for the appointment using `setTimeout` and show an alert.

   - **Delete Patient Functionality:**
     ```jsx
     const handleDeletePatient = (patientId) => {
       axios.delete(`http://localhost:3001/patients/${patientId}`)
         .then(() => setPatients(patients.filter(patient => patient.id !== patientId)))
         .catch(error => console.error('Error deleting patient', error));
     };
     ```

     - **Explanation:**
       - Implement a function to delete a patient from the API and update the state.

   - **Render JSX:**
     ```jsx
     return (
       <div>
         <h1>Patient Management System</h1>
         <PatientList patients={patients} onDeletePatient={handleDeletePatient} />
         <AddPatient onAddPatient={handleAddPatient} />
       </div>
     );
     ```

     - **Explanation:**
       - Render the main JSX structure, including the `PatientList` and `AddPatient` components.

### 2. **AddPatient Component (AddPatient.js):**

   - **Import Statements:**
     ```jsx
     import React, { useState } from 'react';
     import './App.css';
     ```

     - **Explanation:**
       - Import React and `useState` hook.
       - Import the styling from `App.css`.

   - **Component Functionality:**
     ```jsx
     const AddPatient = ({ onAddPatient }) => {
       const [name, setName] = useState('');
       const [dob, setDob] = useState('');
       const [appointmentDate, setAppointmentDate] = useState('');
     };
     ```

     - **Explanation:**
       - Create a functional component to add a new patient.

   - **Add Patient Functionality:**
     ```jsx
     const handleAddPatient = () => {
       const newPatient = {
         id: Date.now(),
         name: name,
         dob: dob,
         appointmentDate: appointmentDate,
       };

       onAddPatient(newPatient);

       // ... rest of the code
     };
     ```

     - **Explanation:**
       - Create a function to add a new patient with the input values.
       - Pass the new patient to the parent component using the `onAddPatient` prop.

   - **Render JSX:**
     ```jsx
     return (
       <div>
         <h2>Add Patient</h2>
         {/* ... input fields for name, date of birth, and appointment date */}
         <button onClick={handleAddPatient}>Add Patient</button>
       </div>
     );
     ```

     - **Explanation:**
       - Render the JSX structure with input fields and a button to add a new patient.

### 3. **PatientList Component (PatientList.js):**

   - **Import Statements:**
     ```jsx
     import React from 'react';
     import './App.css';
     ```

     - **Explanation:**
       - Import React and styling from `App.css`.

   - **Component Functionality:**
     ```jsx
     const PatientList = ({ patients, onDeletePatient }) => {
       // ... rest of the code
     };
     ```

     - **Explanation